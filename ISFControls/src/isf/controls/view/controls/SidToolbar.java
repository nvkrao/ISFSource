package isf.controls.view.controls;

/*
 * protosidviewer.java
 *
 * Created on January 1, 2001, 9:54 AM
 */
/**
 *
 * @author  nvkrao
 */
import isf.common.request.RequestProxy;
import isf.common.utils.CacheManagerConstants;
import isf.controls.controllers.ImageLoaderManager;
import isf.controls.controllers.IsfSplitManager;
import isf.controls.controllers.PTMFrameManager;
import isf.controls.models.DesktopDataObject;
import isf.common.utils.InscriptConfigLoader;
import isf.common.utils.LogManager;
import isf.common.utils.PTMConfig;
import isf.controls.utils.ProgressManager;

import isf.controls.view.listeners.KeyHandler;
import isf.controls.view.listeners.ViewDesktopListener;
//import isf.net.request.RequestDispatcherObject;
import isf.ptm.formats.PTM;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;
import org.apache.log4j.Logger;

public class SidToolbar extends JToolBar implements KeyHandler {
    Logger log = LogManager.getLogger(isf.controls.view.controls.SidToolbar.class);
    static int index = 0;
    ViewDesktopListener vdl;
    //  int mode = 0, lastmode = 0;
    boolean spaceDown = false;
    boolean controlDown = false;
    // KeyEvent lastEvent =null;
    String curDir = "";
    String appMode = "";
    String appName = "";
    ISFButton[] ptmTools;

    /**
     * Creates new form protosidviewer
     */
    public SidToolbar() {
        appMode = InscriptConfigLoader.getInstance().getProperty("mode");
        appName = InscriptConfigLoader.getInstance().getProperty("appName");
        initComponents();

        //setSize(500,500);
        // setVisible(true);
        //setUpFrames();
        setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
        setEnabledButtons();
        vdl = null;
        curDir = System.getProperty("user.dir");


    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void addVDListener(ViewDesktopListener al) {
        vdl = al;

    }

    public void setCommonButtons(boolean enable) {

        ////Common Buttons
        btnSave.setEnabled(enable);
        btnZin.setEnabled(enable);
        btnZout.setEnabled(enable);
        btnPan.setEnabled(enable);
        btnSelZoom.setEnabled(enable);
        btnFit.setEnabled(enable);
        btnProp.setEnabled(enable);
    }

    public void setPTMButtons(boolean enable) {

        //PTM Buttons
        if (ptmTools != null) {
            for (int i = 0; i < ptmTools.length; i++) {
                ptmTools[i].setEnabled(enable);
            }
        }
    }

    private void initComponents() {//GEN-BEGIN:initComponents
        // jPanel1 = new javax.swing.JPanel();

        if (!"WEB".equalsIgnoreCase(appMode) || !"INSCRIPTIFACT".equalsIgnoreCase(appName)) {

            btnOpen = new ISFButton("Open", "images/open.gif", "images/open_d.gif");
            btnOpen.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnOpenActionPerformed(evt);
                }
            });
            btnOpen.setToolTipText("Open  (Alt+O)");
            add(btnOpen);
        }
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));
        if (!"WEB".equalsIgnoreCase(appMode) || !"INSCRIPTIFACT".equalsIgnoreCase(appName)) {
            btnDnl = new ISFButton("Find Images","images/download.gif","images/download_d.gif");
            btnDnl.setToolTipText("Find Saved Images (Alt+D)");
         }else{
            btnDnl = new ISFButton("Find Images","images/download.gif","images/download_d.gif");
            btnDnl.setToolTipText("Find Saved/Downloaded Images (Alt+D)"); 
        }
        
        btnZin = new ISFButton("Zoom In", "images/zin.gif", "images/zind.gif");
        btnZout = new ISFButton("Zoom Out", "images/zout.gif", "images/zoutd.gif");
        btnPan = new ISFButton("Pan", "images/pan.gif", "images/pan_d.gif");
        btnSelZoom = new ISFButton("SelZoom", "images/selz.gif", "images/selz_d.gif");
        btnProp = new ISFButton("Properties", "images/prop.gif", "images/prop_d.gif");
        btnFit = new ISFButton("Fit", "images/fit.gif", "images/fit_d.gif");
        btnAbt = new ISFButton("About", "images/about.gif", "images/about_d.gif");
        btnSave = new ISFButton("Save", "images/save.gif", "images/save_d.gif");

        btnScreen = new ISFButton("Full Screen", "images/fscreen.gif", "images/fscreen_d.gif");




        btnDnl.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDnlActionPerformed(evt);
            }
        });

        // jButton1.setActionCommand("Zoom In");
        btnZin.setToolTipText("Zoom In  (Alt+Z)");
        btnZin.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZinActionPerformed(evt);
            }
        });


        // jButton2.setActionCommand("Zoom Out");
        btnZout.setToolTipText("Zoom Out  (Alt+Z)");
        btnZout.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoutActionPerformed(evt);
            }
        });



        //jButton3.setActionCommand("Pan");
        btnPan.setToolTipText("Pan  (Space)");
        btnPan.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPanActionPerformed(evt);
            }
        });


        btnSelZoom.setToolTipText("Select & Zoom  (Alt+S)");

        btnSelZoom.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelZoomActionPerformed(evt);
            }
        });

        btnFit.setToolTipText("Fit to original  (Alt+O)");

        btnFit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFitActionPerformed((ISFButton) evt.getSource());
            }
        });

        btnProp.setToolTipText("Properties");

        btnProp.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPropActionPerformed(evt);
            }
        });
        btnAbt.setToolTipText("About");

        btnAbt.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbtActionPerformed(evt);
            }
        });

        btnSave.setToolTipText("Save As Tiff/Jpeg");

        btnSave.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });


        btnScreen.setToolTipText("Full Screen  (Alt+F)");

        btnScreen.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScreenActionPerformed((ISFButton) evt.getSource());
            }
        });



        add(btnDnl);
        add(btnSave);
        addSeparator();
        //  addSeparator();
        add(btnZin);
        add(btnZout);
        add(btnSelZoom);
        add(btnPan);
        add(btnFit);
        add(btnProp);
        add(btnScreen);

        addSeparator();

        ptmTools = PTMFrameManager.getPTMButtons();
        if (ptmTools != null) {
            //addSeparator();
            for (int i = 0; i < ptmTools.length; i++) {
                if (i != 3) {
                    ptmTools[i].addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {

                            btnLightActionPerformed(evt);
                        }
                    });
                } else {
                    ptmTools[i].addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {

                            btnCopyActionPerformed(evt);
                        }
                    });
                }
                add(ptmTools[i]);
            }

        // mode = SidDesktop.PTM;

        }
        addSeparator();
        // addSeparator();
        add(btnAbt);


    }//GEN-END:initComponents

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {
        if (PTMFrameManager.getInstance().getPTMWindow() != null) {

            PTM ptm = PTMFrameManager.getInstance().getPTMWindow().getPTM();
            //todo 
            // create copy of the ptm
            if (ptm != null) {
                String name = ptm.getName();
                if (name.indexOf(".ptm") > -1) {
                    name = name.substring(0, name.indexOf(".ptm"));
                }
                if (name.indexOf(".rti") > -1) {
                    name = name.substring(0, name.indexOf(".rti"));
                }
               // System.out.println("Name:" + name);
                if ("WEB".equalsIgnoreCase(appMode)) {
                    PTMConfig config = RequestProxy.getRequestDispatcher().getPTMConfig(name);
                    config.setName(config.getName() + " copy" + index);
                    String ext = config.getExt();

                    DesktopDataObject ddo = new DesktopDataObject(name + " copy" + index, name + " copy" + index, name + ext, name + " copy" + index, config);
                    ddo.setCopy(true);
                    ImageLoaderManager.getInstance().getLoader().addDesktopData(ddo);
                    ImageLoaderManager.getInstance().getLoader().putImage(ddo, ptm);

                } else {
                    String ext = ".ptm";
                    if (ptm.getFileType() == PTM.TYPE_RTI_HSH) {
                        ext = ".rti";
                    } else {
                        ext = ".ptm";
                    }
                    DesktopDataObject ddo = new DesktopDataObject(name + " copy" + index, name + " copy" + index, name + ext, name + " copy" + index);
                    ddo.setCopy(true);
                    ImageLoaderManager.getInstance().getLoader().addDesktopData(ddo);
                    ImageLoaderManager.getInstance().getLoader().putImage(ddo, ptm);
                }
                index++;
            }
        }
    }

    private void btnPanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Add your handling code here:
        vdl.performAction(SidDesktop.PAN);
        PTMFrameManager.setMode(SidDesktop.PAN);
        //  mode = SidDesktop.PAN;
        updateComp((ISFButton) evt.getSource());

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnZoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        vdl.performAction(SidDesktop.ZOUT);
        PTMFrameManager.setMode(SidDesktop.ZOUT);
        //  mode = SidDesktop.ZOUT;
        updateComp((ISFButton) evt.getSource());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnZinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        vdl.performAction(SidDesktop.ZIN);
        //  mode = SidDesktop.ZIN;
        PTMFrameManager.setMode(SidDesktop.ZIN);

        updateComp((ISFButton) evt.getSource());
    // System.out.println(((IFrameUI)jif1.getUI()).titlePane.selectedTextColor.toString());
    // Add your handling code here:

    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void btnDnlActionPerformed(java.awt.event.ActionEvent evt){
         //   JFileChooser chooser = new JFileChooser(new File(CacheManagerConstants.cacheFolderName));
         //   chooser.showDialog(this, CacheManagerConstants.cacheFolderName);
            
           String os =  System.getProperty("os.name");
           String tool = "";
           if(os.toLowerCase().startsWith("win"))
               tool="explorer";
           else if(os.toLowerCase().startsWith("mac"))
               tool="open";
           else //case linux
               tool="xdg-open";           
            ProcessBuilder pb = new ProcessBuilder();
            pb.command(tool, CacheManagerConstants.downloadFolderName);
            try{
            Process p = pb.start();
            }catch(Exception exp){
                log.error(exp);
            }
    }

    private void btnSelZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        vdl.performAction(SidDesktop.SZ);
        // mode = SidDesktop.SZ;
        PTMFrameManager.setMode(SidDesktop.SZ);

        updateComp((ISFButton) evt.getSource());
    // System.out.println(((IFrameUI)jif1.getUI()).titlePane.selectedTextColor.toString());
    // Add your handling code here:

    }

    private void btnFitActionPerformed(ISFButton tib) {//GEN-FIRST:event_jButton1ActionPerformed


        //updateComp(tib);
        vdl.performAction(SidDesktop.FIT);

        if (ptmTools != null && ptmTools[0].isEnabled()) {
            updateComp(ptmTools[0]);
            //  vdl.performAction(SidDesktop.PTM);
            //  mode = SidDesktop.PTM;
            PTMFrameManager.setMode(SidDesktop.PTM);
        } else {
            PTMFrameManager.setMode(SidDesktop.SELECT);
        }

    }

    private void btnPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        //updateComp((ISFButton) evt.getSource());
        vdl.performAction(SidDesktop.PROP);
        //mode = SidDesktop.PROP;
        if (ptmTools != null && ptmTools[0].isEnabled()) {
            updateComp(ptmTools[0]);
            //  vdl.performAction(SidDesktop.PTM);
            //  mode = SidDesktop.PTM;
            PTMFrameManager.setMode(SidDesktop.PTM);
        } else {
            PTMFrameManager.setMode(SidDesktop.SELECT);
        }

    // System.out.println(((IFrameUI)jif1.getUI()).titlePane.selectedTextColor.toString());
    // Add your handling code here:

    }

    private void btnAbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        // updateComp((ISFButton) evt.getSource());
        vdl.performAction(SidDesktop.ABT);


        if (ptmTools != null && ptmTools[0].isEnabled()) {
            updateComp(ptmTools[0]);
            PTMFrameManager.setMode(SidDesktop.PTM);
        } else {
            PTMFrameManager.setMode(SidDesktop.SELECT);
        }

    // System.out.println(((IFrameUI)jif1.getUI()).titlePane.selectedTextColor.toString());
    // Add your handling code here:

    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        //  updateComp((ISFButton) evt.getSource());
        vdl.performAction(SidDesktop.SAVE);
        //  mode = SidDesktop.SAVE;

        if (ptmTools != null && ptmTools[0].isEnabled()) {
            updateComp(ptmTools[0]);
            //  vdl.performAction(SidDesktop.PTM);
            //  mode = SidDesktop.PTM;
            PTMFrameManager.setMode(SidDesktop.PTM);
        } else {
            PTMFrameManager.setMode(SidDesktop.SELECT);
        }

    // System.out.println(((IFrameUI)jif1.getUI()).titlePane.selectedTextColor.toString());
    // Add your handling code here:

    }

    private void btnLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (ptmTools != null && ptmTools[0].isEnabled()) {
            updateComp(ptmTools[0]);
            //vdl.performAction(SidDesktop.PTM);
            //mode = SidDesktop.PTM;
            if(!PTMFrameManager.isAutoClick())
                PTMFrameManager.setMode(SidDesktop.PTM);
        } else {
            if(!PTMFrameManager.isAutoClick())
               PTMFrameManager.setMode(SidDesktop.SELECT);
        }


    }

    private void btnScreenActionPerformed(ISFButton tib) {
        updateComp(tib);
        if (tib.getToolTipText().equals("Full Screen  (Alt+F)")) {
            tib.setToolTipText("Default Screen  (Alt+F)");
            IsfSplitManager.getInstance().updateState(0);

        } else {
            tib.setToolTipText("Full Screen  (Alt+F)");
            IsfSplitManager.getInstance().updateState(1);

        }

        if (ptmTools != null && ptmTools[0].isEnabled()) {
            updateComp(ptmTools[0]);
            // vdl.performAction(SidDesktop.PTM);
            // mode = SidDesktop.PTM;
            PTMFrameManager.setMode(SidDesktop.PTM);
        }



    }

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {

        if (!"WEB".equalsIgnoreCase(appMode)) {  //!ProgressManager.isLoading() &&
            JFileChooser chooser = new JFileChooser(new File(curDir));
            chooser.setFileFilter(new FileFilter() {

                public boolean accept(File f) {
                    if (f.getName().endsWith(".ptm") || f.getName().endsWith(".rti")||f.getName().endsWith(".hsh") || f.getName().endsWith(".mview") || f.isDirectory()) {
                        return true;
                    } else {
                        return false;
                    }
                }

                public String getDescription() {
                    return ("RTI files only");
                }
            });
            int retval = chooser.showOpenDialog(this);
            if (retval == JFileChooser.OPEN_DIALOG) {
                String path = chooser.getSelectedFile().getAbsolutePath();
                String name = chooser.getSelectedFile().getName();

                int ind = path.indexOf(name);
                curDir = path.substring(0, ind);
                // curDir = path.replaceAll(name, "");



                DesktopDataObject ddo = new DesktopDataObject(name, name, path, name);
                ImageLoaderManager.getInstance().getLoader().addDesktopData(ddo);
                ImageLoaderManager.getInstance().getLoader().putImage(ddo);



            }

        } else if ("WEB".equalsIgnoreCase(appMode)) { //!ProgressManager.isLoading() &&
            PTMConfig ptm = ProgressManager.getConfig();
            String ext = ptm.getExt();
            if (ext == null || ext.equalsIgnoreCase("")) {
                ext = ".ptm";
            }
            if (ptm != null) {
                String name = ptm.getName();
                DesktopDataObject ddo = new DesktopDataObject(name, name, name + ext, name, ptm);
                ImageLoaderManager.getInstance().getLoader().addDesktopData(ddo);
                ImageLoaderManager.getInstance().getLoader().putImage(ddo);
                ProgressManager.setConfig(null);
            }
        }/*else if(ProgressManager.isLoading())
        {
        JOptionPane.showMessageDialog(this, "System is already loading a PTM. Please wait till it is over.");
        }*/


        if (ptmTools != null && ptmTools[0].isEnabled()) {
            updateComp(ptmTools[0]);
            //   vdl.performAction(SidDesktop.PTM);
            //   mode = SidDesktop.PTM;
            PTMFrameManager.setMode(SidDesktop.PTM);
        }

    }

    public boolean isFloatable() {
        return false;
    }

    public Insets getMargin() {
        return new Insets(0, 0, 1, 0);

    }

    public void setEnabledButtons() {
        //General Buttons
        if (!"WEB".equalsIgnoreCase(appMode)) {
            btnOpen.setEnabled(true);
        }
        btnScreen.setEnabled(true);
        btnAbt.setEnabled(true);
        setCommonButtons(false);
        setPTMButtons(false);

    }// Variables declaration - do not modify//GEN-BEGIN:variables
    private ISFButton btnOpen,btnDnl,  btnZin,  btnZout,  btnPan,  btnSelZoom,  btnFit,  btnProp,  btnAbt,  btnSave,  btnScreen;//btnOpen
    //private MenuButton comLight;

    

// End of variables declaration//GEN-END:variables
    public void updateComp(ISFButton tic) {
        Component[] cmps = getComponents();
        for (int i = 0; i < cmps.length; i++) {
            /* if(!tic.equals(jButton9)){
            //  System.out.println("called:"+ tic);
            }*/
            //     if(!tic.equals(jButton9)){
            if (cmps[i] instanceof ISFButton) {
                if (((ISFButton) cmps[i]).equals(tic)) {
                    ((ISFButton) cmps[i]).setSelected(true);
                } else {
                    ((ISFButton) cmps[i]).setSelected(false);
                }
            }
        //  }
        }
    }

    public ISFButton getSelected() {
        Component[] cmps = getComponents();
        for (int i = 0; i < cmps.length; i++) {
            if (cmps[i] instanceof ISFButton) {
                if (((ISFButton) cmps[i]).isSelected()) {
                    return (ISFButton) cmps[i];
                }
            }
        }
        return null;
    }

    public void updateDefault() {
        Component[] cmps = getComponents();
        for (int i = 0; i < cmps.length; i++) {
            if (cmps[i] instanceof ISFButton && !cmps[i].equals(btnScreen)) {
                ((ISFButton) cmps[i]).setSelected(false);
            }
        }
    }

    public boolean trapKeys() {
        return isShowing();
    }

    public void fireKeyEvent(KeyEvent event) {

        int keycode = event.getKeyCode();
        if (event.getID() == KeyEvent.KEY_PRESSED && keycode == KeyEvent.VK_ALT) {
            SidDesktop.masked = true;
        } else if (keycode != KeyEvent.VK_ALT || event.getID() == KeyEvent.KEY_RELEASED) {
            SidDesktop.masked = false;
        }

        switch (keycode) {
            case KeyEvent.VK_Z:
                if (event.getID() == KeyEvent.KEY_PRESSED) {
                    setupZoom(event.isAltDown());
                }
                break;
            case KeyEvent.VK_SPACE:
                if (event.getID() == KeyEvent.KEY_PRESSED) {
                    setupPan();
                }
                break;
            case KeyEvent.VK_S:
                if (event.getID() == KeyEvent.KEY_PRESSED && event.isAltDown()) {
                    controlDown = false;
                    spaceDown = false;
                    setupSelZoom();
                }
                break;
            case KeyEvent.VK_F:
                if (event.isAltDown() && event.getID() == KeyEvent.KEY_PRESSED) {
                    btnScreenActionPerformed(btnScreen);
                }
                break;
            case KeyEvent.VK_O:
                if (event.isAltDown() && event.getID() == KeyEvent.KEY_PRESSED) {
                    btnFitActionPerformed(btnFit);
                }
                break;
            default:
                // System.out.println("keycode:" + keycode);
                break;

        }
    //  lastEvent=event;

    }

    private void setupZoom(boolean alt) {
        int mode = PTMFrameManager.getMode();
        if (mode == SidDesktop.ZIN && alt) {
            vdl.performAction(SidDesktop.ZOUT);
            //mode = SidDesktop.ZOUT;
            PTMFrameManager.setMode(SidDesktop.ZOUT);
            updateComp(btnZout);
        } else if (alt) {
            vdl.performAction(SidDesktop.ZIN);
            // mode = SidDesktop.ZIN;
            PTMFrameManager.setMode(SidDesktop.ZIN);
            updateComp(btnZin);
        }
    }

    private void setupPan() {
        vdl.performAction(SidDesktop.PAN);
        // mode = SidDesktop.PAN;
        PTMFrameManager.setMode(SidDesktop.ZIN);//ZIN
        updateComp(btnPan);
    }

    private void setupSelZoom() {
        vdl.performAction(SidDesktop.SZ);
        // mode = SidDesktop.SZ;
        PTMFrameManager.setMode(SidDesktop.ZIN);
        updateComp(btnSelZoom);
    }
}
